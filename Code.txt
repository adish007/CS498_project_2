from flask import Flask
from google.cloud import bigtable
import os

app = Flask(__name__)

# Setup Bigtable
PROJECT_ID = "amiable-mix-453321-b0"
INSTANCE_ID = "ev-bigtable"
TABLE_ID = "ev-population"
COLUMN_FAMILY = "ev_info"

client = bigtable.Client(project=PROJECT_ID, admin=True)
instance = client.instance(INSTANCE_ID)
table = instance.table(TABLE_ID)

@app.route('/rows')
def count_rows():
    count = sum(1 for _ in table.read_rows())
    return str(count)

@app.route('/Best-BMW')
def best_bmw():
    count = 0
    for row in table.read_rows():
        if COLUMN_FAMILY not in row.cells:
            return str("404")
            continue

        cell_data = row.cells[COLUMN_FAMILY]
        make_cells = cell_data.get(b'make', [])
        range_cells = cell_data.get(b'electric range', [])

        if not make_cells or not range_cells:
            return str("404")
            continue

        try:
            make_val = make_cells[0].value.decode("utf-8")
            range_val = range_cells[0].value.decode("utf-8")
        except Exception:
            continue

        if make_val.upper() == "BMW":
            print(range_val)
            if int(range_val) > 100:
                count += 1

    return str(count)


@app.route('/tesla-owners')
def tesla_owners():
    count = 0
    for row in table.read_rows():
        if COLUMN_FAMILY not in row.cells:
            continue

        cell_data = row.cells[COLUMN_FAMILY]
        make_cells = cell_data.get(b'make', [])
        city_cells = cell_data.get(b'city', [])

        if not make_cells or not city_cells:
            continue

        try:
            make_val = make_cells[0].value.decode("utf-8")
            city_val = city_cells[0].value.decode("utf-8")
        except Exception:
            continue

        if make_val.upper() == "TESLA" and city_val.upper() == "SEATTLE":
            count += 1

    return str(count)

@app.route('/update')
def update_range():
    row_key = b'257246118'
    bt_row = table.direct_row(row_key)
    bt_row.set_cell(COLUMN_FAMILY, "electric range", "200")
    bt_row.commit()
    return "Success"

@app.route('/delete')
def delete_old_models():
    total_remaining = 0
    to_delete = []
    partial_rows = table.read_rows()

    for row in partial_rows:
        model_year_cell = row.cells[COLUMN_FAMILY].get("model year", [])
        if not model_year_cell:
            continue
        year_str = model_year_cell[0].value.decode("utf-8")
        try:
            year = int(year_str)
        except:
            continue

        if year < 2014:
            to_delete.append(row.row_key)
            
    count = 0 
    for key in to_delete:
        count += 1
        table.row(key).delete()

    return str(count)
    count = sum(1 for _ in table.read_rows())
    return str(count)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


# Data load Script

from google.cloud import bigtable
from google.cloud.bigtable import row
import pandas as pd


df = pd.read_csv("Electric_Vehicle_Population_Data.csv")  
df.columns = df.columns.str.strip()  


client = bigtable.Client(project="amiable-mix-453321-b0", admin=True)
instance = client.instance("ev-bigtable")
table = instance.table("ev-population")


i = 0 
for _, r in df.iterrows():
    row_key = str(r["DOL Vehicle ID"]).encode()
    bt_row = table.direct_row(row_key)
    i += 1
    if i%5000 == 0:
        print("Row Loaded")
    bt_row.set_cell("ev_info", "make", str(r["Make"]))
    bt_row.set_cell("ev_info", "model", str(r["Model"]))
    bt_row.set_cell("ev_info", "model year", str(r["Model Year"]))
    bt_row.set_cell("ev_info", "electric range", str(r["Electric Range"]))
    bt_row.set_cell("ev_info", "city", str(r["City"]))
    bt_row.set_cell("ev_info", "county", str(r["County"]))

    bt_row.commit()

print("Data load done!")